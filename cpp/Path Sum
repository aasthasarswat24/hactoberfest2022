Problem Statement: Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
A leaf is a node with no children.

Solution in C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        //Base Case
        if(root == NULL){
            return false;
        }
        
        if(root->left == NULL && root->right == NULL){
            if(root->val == targetSum){
                return true;
            }
            return false;
        }
        
        //Recursion Calls
        bool ans1 = hasPathSum(root->left, targetSum-root->val);
        bool ans2 = hasPathSum(root->right, targetSum-root->val);
        
        return (ans1||ans2);
    }
};
